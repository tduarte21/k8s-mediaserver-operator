name: Build and Push Image

env:
  DEFAULT_RELEASE_VERSION: "v1.0.0"

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/**'
      - 'helm-charts/k8s-mediaserver/**'
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  helm-test:
    runs-on: tduarte #ubuntu-latest
    name: Build images and deploy KinD cluster with test resources
    env:
      ingress_host: k8s-mediaserver.k8s.test
      plex_ingress_host: k8s-plex.k8s.test
      IMAGE_TAG: ${{ vars.DOCKER_PUSH_REPO }}/${{ vars.DOCKER_PUSH_IMAGE }}:latest
      IMAGE_TAG_DEV: ${{ vars.DOCKER_PUSH_REPO }}/${{ vars.DOCKER_PUSH_IMAGE }}:dev #${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.10.0'
        id: install-helm

      - name: Lint Helm template
        run: helm template helm-charts/k8s-mediaserver

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_PUSH_USERNAME }}
          password: ${{ secrets.DOCKER_PUSH_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.IMAGE_TAG_DEV }}
          context: .

      - name: Fetch newer version of CRD
        run: |
          cp k8s-mediaserver.yml k8s-mediaserver-operator.yml tests/
          sed -i 's/accessMode: ""/accessMode: ReadWriteOnce/g' tests/k8s-mediaserver.yml
          sed -i 's/pvcStorageClass: ""/pvcStorageClass: standard/g' tests/k8s-mediaserver.yml
          sed 's|quay.io\/kubealex.*|${{ env.IMAGE_TAG_DEV }}|g' tests/k8s-mediaserver-operator.yml

      - name: Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kind
          config: tests/kind-cluster.yml

      - name: Load images into KinD nodes
        run: |
          docker pull ${{ env.IMAGE_TAG_DEV }}
          kind load docker-image ${{ env.IMAGE_TAG_DEV }}

      - name: Deploy ingress to newly created cluster
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          while [[ $(kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "Waiting for ingress pod to be ready" && sleep 5; done

      - name: Deploy k8s-mediaserver-operator
        run: |
          kubectl apply -f k8s-mediaserver-operator.yml
          while [[ $(kubectl get pods -n k8s-mediaserver-operator-system -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "Waiting for operator pod to be ready" && sleep 5; done

      - name: Deploy k8s-mediaserver CRD
        run: |
          kubectl create ns mediaserver
          kubectl apply -f tests/k8s-mediaserver.yml -n mediaserver
          sleep 15
          for pod in $(kubectl get pods -n mediaserver | awk 'NR>1{ print $1 }'); do while [[ $(kubectl get pods $pod -n mediaserver -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "Waiting for mediaserver pods to be ready" && sleep 10; done ; done

      - name: Edit hosts file and test apps
        run: |
          sudo echo "127.0.0.1   ${{ env.plex_ingress_host }} ${{ env.ingress_host }}" | sudo tee -a /etc/hosts
          wget ${{ env.ingress_host }}/jackett
          wget ${{ env.ingress_host }}/sonarr
          wget ${{ env.ingress_host }}/radarr
          wget ${{ env.ingress_host }}/sabnzbd
          wget ${{ env.ingress_host }}/prowlarr          
          curl ${{ env.plex_ingress_host }} 

  release:
    name: Release
    runs-on: tduarte #ubuntu-latest
    needs: helm-test
    outputs:
      release_tag: ${{ steps.bump-version.outputs.new_tag || env.DEFAULT_RELEASE_VERSION }}
      previous_tag: ${{ steps.bump-version.outputs.previous_tag || env.DEFAULT_RELEASE_VERSION }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_PUSH_USERNAME }}
          password: ${{ secrets.DOCKER_PUSH_TOKEN }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ vars.DOCKER_PUSH_REPO }}/${{ vars.DOCKER_PUSH_IMAGE }}:latest
          context: .
