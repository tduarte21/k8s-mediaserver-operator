{{ if .Values.kavita.enabled }}
#---
### CONFIGMAP
## INIT-CONTAINER
#---
#apiVersion: v1
#data:
#  config.xml: |
#    <Config>
#      <UrlBase>{{ .Values.kavita.ingress.path }}</UrlBase>
#    </Config>
#  init-kavita.sh: |
#    #!/bin/bash
#    echo "### Initializing config ###"
#    if [ ! -f /kavita-config/config.xml ]; then
#      cp -n /init-kavita/config.xml /kavita-config/config.xml
#      echo "### No configuration found, intialized with default settings ###"
#    fi
#kind: ConfigMap
#metadata:
#  name: init-kavita-cm
---
## APPLICATION
apiVersion: v1
kind: ConfigMap
metadata:
  name: kavita-config
data:
  PGID: "{{ .Values.general.pgid }}"
  PUID: "{{ .Values.general.puid }}"
---
### DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kavita
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      {{- include "k8s-mediaserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "k8s-mediaserver.selectorLabels" . | nindent 8 }}
        app: kavita
    spec:
#      initContainers:
#        - name: config-kavita
#          image: docker.io/ubuntu:groovy
#          command: ["/init-kavita/init-kavita.sh"]
#          volumeMounts:
#            - mountPath: /init-kavita
#              name: init-files-kavita
#          {{- if .Values.kavita.volume }}
#            - name: {{ .Values.kavita.volume.name }}
#              mountPath: /kavita-config
#          {{- else }}
#            - name: mediaserver-volume
#              mountPath: /kavita-config
#              subPath: "{{ .Values.general.storage.subPaths.config }}/kavita"
#          {{- end }}
#          securityContext:
#            runAsUser: {{ .Values.general.puid }}
#            runAsGroup: {{ .Values.general.pgid }}
      containers:
        - name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: kavita-config
          image: "{{ .Values.kavita.container.image }}:{{ .Values.kavita.container.tag | default .Values.general.image_tag }}"
          imagePullPolicy: Always
          readinessProbe:
            tcpSocket:
              port: {{ .Values.kavita.container.port }}
            initialDelaySeconds: 10
            periodSeconds: 20
          ports:
            - name: kavita-port
              containerPort: {{ .Values.kavita.container.port }}
              protocol: TCP
#          securityContext:
#            runAsUser: {{ .Values.kavita.container.runAsUser }}
#            runAsGroup: {{ .Values.kavita.container.runAsGroup }}
          volumeMounts:
          {{- if .Values.kavita.volume }}
            - name: {{ .Values.kavita.volume.name }}
              mountPath: /config
          {{- else }}
            - name: mediaserver-volume
              mountPath: "/config"
              subPath: "{{ .Values.general.storage.subPaths.config }}/kavita"
          {{- end }}
            - name: mediaserver-volume
              mountPath: "/downloads"
              subPath: "{{ .Values.general.storage.subPaths.downloads }}"
            - name: mediaserver-volume
              mountPath: "/ebooks"
              subPath: "{{ .Values.general.storage.subPaths.ebooks }}"
          {{- with .Values.kavita.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- if not .Values.general.storage.customVolume }}
        - name: mediaserver-volume
          persistentVolumeClaim:
            claimName: {{ .Values.general.storage.pvcName }}
        {{- else }}
        - name: mediaserver-volume
          {{- toYaml .Values.general.storage.volumes | nindent 10 }}
        {{- end }}
        {{- if .Values.kavita.volume }}
        - name: {{ .Values.kavita.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.kavita.volume.name }}
        {{- end }}
#        - name: init-files-kavita
#          configMap:
#            defaultMode: 493
#            name: init-kavita-cm
      {{- with .Values.general.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
### SERVICES
apiVersion: v1
kind: Service
metadata:
  name: kavita
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: {{ .Values.kavita.service.type }}
  ports:
    - port: {{ .Values.kavita.service.port }}
      targetPort: {{ .Values.kavita.container.port }}
      protocol: TCP
{{ if eq .Values.kavita.service.type "NodePort" }}
      nodePort: {{ .Values.kavita.service.nodePort }}
{{ end }}
      name: kavita-port
  selector:
    app: kavita

---
{{ if .Values.kavita.service.extraLBService }}
apiVersion: v1
kind: Service
metadata:
  name: kavita-lb
  annotations:
    {{- include .Values.kavita.service.extraLBService.annotations . | nindent 4 }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.kavita.service.port }}
      targetPort: {{ .Values.kavita.container.port }}
      protocol: TCP
      name: kavita-port
  selector:
    app: kavita
{{ end }}
---
### INGRESS ###
{{ if .Values.kavita.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kavita
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
  {{- with .Values.kavita.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.kavita.ingress.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.general.ingress_host | quote }}
      secretName: {{ .Values.kavita.ingress.tls.secretName }}
{{ end }}
  ingressClassName: {{ .Values.general.ingress.ingressClassName }}
  rules:
    - host: {{ .Values.general.ingress_host | quote }}
      http:
        paths:
          - path: {{ .Values.kavita.ingress.path }}
            pathType: Prefix
            backend:
              service:
                name: kavita
                port:
                  number: {{ .Values.kavita.service.port }}
{{ end }}
{{ end }}
